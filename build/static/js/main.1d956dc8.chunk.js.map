{"version":3,"sources":["components/Paginate.js","components/Profile.js","components/SearchResult.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","usersPerPage","totalUsers","paginate","pageNumbers","i","Math","ceil","push","className","map","number","key","onClick","Profile","profileInfo","avatar_url","login","name","email","location","following","followers","public_repos","bio","company","src","alt","type","SearchResult","items","useState","profileDetails","setProfileDetails","userDetails","setUserDetails","displayProfile","setShowProfile","useEffect","a","options","method","url","process","axios","data","getProfile","showProfile","total_count","e","userInfo","Home","props","username","setUsername","result","setResult","currentPage","setCurrentPage","totalCount","setTotalCount","getList","page","toast","error","placeholder","onChange","target","value","onKeyPress","required","pageNumber","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1d956dc8.chunk.js","sourcesContent":["import React from 'react';\n\nconst Pagination = ({usersPerPage, totalUsers, paginate}) => {\n   const pageNumbers = [];\n\n   for(let i = 1; i <= Math.ceil(totalUsers / usersPerPage); i++) {\n       pageNumbers.push(i);\n   }\n\n    return (\n        \n             <footer className=\"page-footer\">\n                  <ul>\n                   {pageNumbers.map(number => (\n                     <li key={number} onClick={() => paginate(number)}>\n                         {number}\n                     </li>\n                   ))}\n                </ul>\n                 </footer>  \n              \n    )\n}\n\nexport default Pagination;","import React from 'react';\n\n\nconst Profile = ({profileInfo}) => {\n    const {avatar_url, login, name, email, location, following, followers, public_repos, bio, company} = profileInfo;\n    return (\n        <div className=\"user-profile-details\">\n        <div className=\"user-img\">\n            <img src={avatar_url} alt=\"user-avatar\"/>\n        </div> \n        <div className=\"follow-user\">\n            <h4>{login}</h4>\n            <p>{name}</p>\n            <button type=\"button\">Follow</button>\n            <h5>Block or report user</h5>\n            <div className=\"user-icons\">\n                <i className=\"fal fa-location\"><span>{location}</span></i>\n                <i className=\"fas fa-building\"><span>{company}</span></i>\n                <i className=\"far fa-envelope\"><span>{email}</span></i>\n                <i className=\"far fa-user\"><span>{bio}</span></i>\n            </div>\n            <div className=\"activities\">\n            <ul>\n               <li>Overview </li>\n               <li>Repositories <span>{public_repos}</span></li>\n               <li>Followers <span>{followers}</span></li>\n               <li>Following <span>{following}</span></li>\n           </ul>\n            </div>\n        </div>              \n    </div>\n    )\n}\n\nexport default Profile;","import React, {useState, useEffect} from 'react';\nimport Pagination from './Paginate';\nimport Profile from './Profile';\nimport axios from 'axios';\n\nconst SearchResult = ({SearchResult, usersPerPage, totalUsers, paginate}) => {\n  const {items} = SearchResult;\n  const [profileDetails, setProfileDetails] = useState({});\n  const [userDetails, setUserDetails] = useState(\"\");\n  const [displayProfile, setShowProfile] = useState(false);\n  const {REACT_APP_API_URL} = process.env;\n\n\n  const showProfile = () => {\n    if(displayProfile){\n      return <Profile profileInfo={profileDetails}/>\n    }\n  }\n\n  useEffect(() => {\n    const getProfile = async () => {\n      const options = {\n        method: 'GET',\n        url: `${REACT_APP_API_URL}/search/${userDetails}`\n      };\n\n      let data = await axios(options);\n\n      setProfileDetails(data.data);\n      setShowProfile(true);\n    }\n\n    getProfile();\n  }, [userDetails]);\n\n\n  const userInfo = () => {\n    if(items) {\n      return items.map((data, i) => {\n        return (\n          <div className=\"result\" key={i}>\n        <div className=\"user-profile\">\n        <div className=\"user-avatar\">\n           <img src={data.avatar_url} alt=\"user-avatar\"/>\n        </div>\n        \n        <div className=\"user\">\n            <div className=\"username\" onClick={e => setUserDetails(data.login)}>\n            <h4>{data.login}</h4>\n            <span>{data.login}</span>\n            </div>\n        </div>\n        </div>\n        <button type=\"button\" className=\"follow-btn\">Follow</button>                \n      </div> \n        )\n      })\n    }\n  }\n\n    return (\n        <div className=\"search-content\">\n              {showProfile()}\n               <div className=\"result-header\">\n                   <div className=\"count\">\n                        <h4>{SearchResult.total_count}</h4><span>users</span>\n                   </div>\n                    <button type=\"button\" className=\"follow-button\">Sort: Best match</button>\n               </div> \n               <div className=\"results\">\n                 <div className=\"result\">\n                    <div className=\"user-profile\">\n                    <div className=\"user-avatar\">\n                       <img src=\"https://wificallrecord.s3.amazonaws.com/document_uploads/47714176093329633131.jpeg\" alt=\"user-avatar\"/>\n                    </div>\n                    \n                    <div className=\"user\">\n                        <div className=\"username\">\n                        <h4>Michael King</h4>\n                        <span>Michgboxy</span>\n                        </div>\n                    </div>\n                    </div>\n                    <button type=\"button\" className=\"follow-btn\">Follow</button>                \n                  </div> \n                  {userInfo()}\n                  <Pagination usersPerPage={usersPerPage} totalUsers={totalUsers} paginate={paginate}/>\n              </div>\n            </div>\n    )\n}\n\nexport default SearchResult;","import React, {useState} from 'react';\nimport '../home.css';\nimport SeachResult from './SearchResult';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst Home = (props) => {\n    const [username, setUsername] = useState('');\n    const [result, setResult] = useState({});\n    const [currentPage, setCurrentPage] = useState(1);\n    const [usersPerPage, setUsersPerPage] = useState(30);\n    const [totalCount, setTotalCount] = useState(0);\n    const {REACT_APP_API_URL} = process.env;\n\n    \n\n    const getList = async (page) => {\n        if(!username){\n            toast.error(\"Kindly input a name\");\n            return;\n        }\n\n        try{\n            const options = {\n                method: 'GET',\n                url: `${REACT_APP_API_URL}/search?username=${username}&page=${page}`\n              };\n    \n              let data = await axios(options);\n              \n              if(data.data.total_count > 300){\n                setTotalCount(300);\n              } else {\n              setTotalCount(data.data.total_count);\n            }\n    \n              setResult(data.data);\n\n        }catch(e){\n            toast.error(\"something went wrong\");\n            return;\n        }\n        \n    }\n    \n    \n    const SearchUser = (e) => {\n        if(e.key === \"Enter\"){ getList(currentPage); }\n    }\n\n    const paginate = (pageNumber) => {setCurrentPage(pageNumber); getList(pageNumber)};\n\n    return (\n       <div>\n            <section className=\"main-page\">\n            <nav className=\"navbar\">\n                <div className=\"search-bar\">\n                    <i className=\"far fa-star\"></i>\n                    <input type=\"text\"\n                        placeholder=\"Search Github\"\n                        className=\"search-bar-input\"\n                        onChange={(e) => setUsername(e.target.value)}\n                        onKeyPress={SearchUser}\n                        required={true}\n                        value={username}\n                    />\n                    <h4>Pull requests</h4>\n                    <h4>Issues</h4>\n                    <h4>Marketplace</h4>\n                    <h4>Explore</h4>\n                </div>\n            </nav>\n            <SeachResult SearchResult={result} usersPerPage={usersPerPage} totalUsers={totalCount} paginate={paginate}/>          \n        </section>\n        <ToastContainer />\n    \n       </div>\n        \n\n    )\n}\n\nexport default Home;","import React from 'react';\nimport {Route, HashRouter} from 'react-router-dom';\nimport Home from './components/Home';\n\nconst App = () => {\n  return (\n    <HashRouter>\n        <div className=\"App\">\n           <Route exact path=\"/\" component={Home}/>\n        </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}